"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"guides":[{"type":"link","label":"Getting Started","href":"/docs/guides/","docId":"guides/readme"},{"type":"link","label":"Getting Started with the LabSDK","href":"/docs/guides/getting-started-with-labsdk","docId":"guides/getting-started-with-labsdk"},{"type":"link","label":"Hello World feature","href":"/docs/guides/hello-world-feature","docId":"guides/hello-world-feature"},{"type":"category","label":"LabSDK","collapsible":true,"collapsed":true,"customProps":{"description":"Learn how to create Raptor compatible features from your notebook"},"className":"labsdk","items":[{"type":"link","label":"The basics","href":"/docs/guides/labsdk/basics","docId":"guides/labsdk/basics"},{"type":"link","label":"Aggregations","href":"/docs/guides/labsdk/aggregations","docId":"guides/labsdk/aggregations"},{"type":"link","label":"Counters","href":"/docs/guides/labsdk/simple-counter","docId":"guides/labsdk/simple-counter"},{"type":"link","label":"Derived feature (or How to do Joins?)","href":"/docs/guides/labsdk/derived","docId":"guides/labsdk/derived"},{"type":"link","label":"Feature Set","href":"/docs/guides/labsdk/featureset","docId":"guides/labsdk/featureset"}],"href":"/docs/guides/labsdk/"},{"type":"link","label":"Installing Raptor on your Kubernetes cluster","href":"/docs/guides/install","docId":"guides/install"},{"type":"link","label":"Troubleshooting features","href":"/docs/guides/troubleshooting-features","docId":"guides/troubleshooting-features"}],"reference":[{"type":"category","label":"How does Raptor Work?","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Feature Builders","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Building your own Builder","href":"/docs/reference/how-does-raptor-work/feature-builders/building-your-own-builder","docId":"reference/how-does-raptor-work/feature-builders/building-your-own-builder"}],"href":"/docs/reference/how-does-raptor-work/feature-builders/"},{"type":"category","label":"DataConnectors","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"streaming","href":"/docs/reference/how-does-raptor-work/dataconnector/streaming","docId":"reference/how-does-raptor-work/dataconnector/streaming"}],"href":"/docs/reference/how-does-raptor-work/dataconnector/"},{"type":"link","label":"Extending Raptor","href":"/docs/reference/how-does-raptor-work/extending-raptor/","docId":"reference/how-does-raptor-work/extending-raptor/README"},{"type":"link","label":"Feature Sets","href":"/docs/reference/how-does-raptor-work/feature-sets","docId":"reference/how-does-raptor-work/feature-sets"},{"type":"category","label":"Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Aggregations","href":"/docs/reference/how-does-raptor-work/features/aggregations","docId":"reference/how-does-raptor-work/features/aggregations"},{"type":"link","label":"Feature Definitions","href":"/docs/reference/how-does-raptor-work/features/feature-definitions","docId":"reference/how-does-raptor-work/features/feature-definitions"},{"type":"link","label":"Features SLA","href":"/docs/reference/how-does-raptor-work/features/feature-sla","docId":"reference/how-does-raptor-work/features/feature-sla"},{"type":"link","label":"Feature Values","href":"/docs/reference/how-does-raptor-work/features/feature-values","docId":"reference/how-does-raptor-work/features/feature-values"}],"href":"/docs/reference/how-does-raptor-work/features/"},{"type":"link","label":"fqn","href":"/docs/reference/how-does-raptor-work/fqn","docId":"reference/how-does-raptor-work/fqn"},{"type":"link","label":"Historical Data and Retraining","href":"/docs/reference/how-does-raptor-work/historical-data-and-backfill","docId":"reference/how-does-raptor-work/historical-data-and-backfill"}],"href":"/docs/reference/how-does-raptor-work/"},{"type":"category","label":"LabSDK","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"decorators","href":"/docs/reference/labsdk/decorators","docId":"reference/labsdk/decorators"},{"type":"link","label":"export","href":"/docs/reference/labsdk/export","docId":"reference/labsdk/export"},{"type":"link","label":"featureset","href":"/docs/reference/labsdk/featureset","docId":"reference/labsdk/featureset"}]},{"type":"category","label":"PyExp","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Differences with Python","href":"/docs/reference/pyexp/differences-with-python","docId":"reference/pyexp/differences-with-python"},{"type":"link","label":"Handler function","href":"/docs/reference/pyexp/handler-function","docId":"reference/pyexp/handler-function"},{"type":"category","label":"PyExp: Language definition","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Built-in constants and functions","href":"/docs/reference/pyexp/pyexp-language-definition/built-in-constants-and-functions","docId":"reference/pyexp/pyexp-language-definition/built-in-constants-and-functions"},{"type":"link","label":"Built-in methods","href":"/docs/reference/pyexp/pyexp-language-definition/built-in-methods","docId":"reference/pyexp/pyexp-language-definition/built-in-methods"},{"type":"link","label":"Data types","href":"/docs/reference/pyexp/pyexp-language-definition/data-types","docId":"reference/pyexp/pyexp-language-definition/data-types"},{"type":"link","label":"Expressions","href":"/docs/reference/pyexp/pyexp-language-definition/expressions","docId":"reference/pyexp/pyexp-language-definition/expressions"},{"type":"link","label":"Lexical elements","href":"/docs/reference/pyexp/pyexp-language-definition/lexical-elements","docId":"reference/pyexp/pyexp-language-definition/lexical-elements"},{"type":"link","label":"Name binding and variables","href":"/docs/reference/pyexp/pyexp-language-definition/name-binding-and-variables","docId":"reference/pyexp/pyexp-language-definition/name-binding-and-variables"},{"type":"link","label":"Statements","href":"/docs/reference/pyexp/pyexp-language-definition/statements","docId":"reference/pyexp/pyexp-language-definition/statements"},{"type":"link","label":"Value concepts","href":"/docs/reference/pyexp/pyexp-language-definition/value-concepts","docId":"reference/pyexp/pyexp-language-definition/value-concepts"}],"href":"/docs/reference/pyexp/pyexp-language-definition/"},{"type":"category","label":"Raptor Built-ins","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"base64","href":"/docs/reference/pyexp/raptor-built-ins/base64","docId":"reference/pyexp/raptor-built-ins/base64"},{"type":"link","label":"bsoup","href":"/docs/reference/pyexp/raptor-built-ins/bsoup","docId":"reference/pyexp/raptor-built-ins/bsoup"},{"type":"link","label":"geo","href":"/docs/reference/pyexp/raptor-built-ins/geo","docId":"reference/pyexp/raptor-built-ins/geo"},{"type":"link","label":"hash","href":"/docs/reference/pyexp/raptor-built-ins/hash","docId":"reference/pyexp/raptor-built-ins/hash"},{"type":"link","label":"html","href":"/docs/reference/pyexp/raptor-built-ins/html","docId":"reference/pyexp/raptor-built-ins/html"},{"type":"link","label":"json","href":"/docs/reference/pyexp/raptor-built-ins/json","docId":"reference/pyexp/raptor-built-ins/json"},{"type":"link","label":"math","href":"/docs/reference/pyexp/raptor-built-ins/math","docId":"reference/pyexp/raptor-built-ins/math"},{"type":"link","label":"re (regular expressions)","href":"/docs/reference/pyexp/raptor-built-ins/re-regular-expressions","docId":"reference/pyexp/raptor-built-ins/re-regular-expressions"},{"type":"link","label":"struct","href":"/docs/reference/pyexp/raptor-built-ins/struct","docId":"reference/pyexp/raptor-built-ins/struct"},{"type":"link","label":"time","href":"/docs/reference/pyexp/raptor-built-ins/time","docId":"reference/pyexp/raptor-built-ins/time"}],"href":"/docs/reference/pyexp/raptor-built-ins/"}],"href":"/docs/reference/pyexp/"},{"type":"link","label":"Architectural Design","href":"/docs/reference/spec","docId":"reference/spec"}]},"docs":{"guides/getting-started-with-labsdk":{"id":"guides/getting-started-with-labsdk","title":"Getting Started with the LabSDK","description":"Start writing features from your notebook in less than 5 minutes.","sidebar":"guides"},"guides/hello-world-feature":{"id":"guides/hello-world-feature","title":"Hello World feature","description":"Creating a feature is as simple as specifying a YAML file.  Here\'s an example of a minimal feature definition:","sidebar":"guides"},"guides/install":{"id":"guides/install","title":"Installing Raptor on your Kubernetes cluster","description":"Raptor installation is not required for training purposes.","sidebar":"guides"},"guides/labsdk/aggregations":{"id":"guides/labsdk/aggregations","title":"Aggregations","description":"Aggregations are probably the most complex challenge while building a production-grade feature,","sidebar":"guides"},"guides/labsdk/basics":{"id":"guides/labsdk/basics","title":"The basics","description":"In this tutorial, we\'ll cover the basics of using the LabSDK to write features.","sidebar":"guides"},"guides/labsdk/derived":{"id":"guides/labsdk/derived","title":"Derived feature (or How to do Joins?)","description":"Raptor is introducing a new way to join between pieces of data - \\"dependencies\\".","sidebar":"guides"},"guides/labsdk/featureset":{"id":"guides/labsdk/featureset","title":"Feature Set","description":"Feature Sets are a way to group features together as a ready-to-use dataset for your model:","sidebar":"guides"},"guides/labsdk/readme":{"id":"guides/labsdk/readme","title":"LabSDK","description":"The LabSDK is a utility library that helps you to develop Raptor compatible features directly from Python.","sidebar":"guides"},"guides/labsdk/simple-counter":{"id":"guides/labsdk/simple-counter","title":"Counters","description":"We can also build features that have a lifetime counter, like \\"lifetime views\\".","sidebar":"guides"},"guides/readme":{"id":"guides/readme","title":"Welcome to the Raptor Documentation","description":"Welcome to Raptor docs!","sidebar":"guides"},"guides/troubleshooting-features":{"id":"guides/troubleshooting-features","title":"Troubleshooting features","description":"","sidebar":"guides"},"reference/how-does-raptor-work/dataconnector/readme":{"id":"reference/how-does-raptor-work/dataconnector/readme","title":"DataConnectors","description":"DataConnectors are the glue that connect your Feature Definitions to the production data sources (such as streaming,","sidebar":"reference"},"reference/how-does-raptor-work/dataconnector/streaming":{"id":"reference/how-does-raptor-work/dataconnector/streaming","title":"streaming","description":"","sidebar":"reference"},"reference/how-does-raptor-work/extending-raptor/README":{"id":"reference/how-does-raptor-work/extending-raptor/README","title":"Extending Raptor","description":"","sidebar":"reference"},"reference/how-does-raptor-work/feature-builders/building-your-own-builder":{"id":"reference/how-does-raptor-work/feature-builders/building-your-own-builder","title":"Building your own Builder","description":"","sidebar":"reference"},"reference/how-does-raptor-work/feature-builders/readme":{"id":"reference/how-does-raptor-work/feature-builders/readme","title":"Feature Builders","description":"","sidebar":"reference"},"reference/how-does-raptor-work/feature-sets":{"id":"reference/how-does-raptor-work/feature-sets","title":"Feature Sets","description":"Feature Sets group Features together as a unit for the consumption of models.","sidebar":"reference"},"reference/how-does-raptor-work/features/aggregations":{"id":"reference/how-does-raptor-work/features/aggregations","title":"Aggregations","description":"Aggregations are a way to summarize data over a time window. They are used to calculate the feature value, and are","sidebar":"reference"},"reference/how-does-raptor-work/features/feature-definitions":{"id":"reference/how-does-raptor-work/features/feature-definitions","title":"Feature Definitions","description":"To build production-ready features, Raptor must understand the logic of the Feature and create the engineering setup","sidebar":"reference"},"reference/how-does-raptor-work/features/feature-sla":{"id":"reference/how-does-raptor-work/features/feature-sla","title":"Features SLA","description":"Production systems expect strict service guarantees that ensures the quality of the service for the end-user.","sidebar":"reference"},"reference/how-does-raptor-work/features/feature-values":{"id":"reference/how-does-raptor-work/features/feature-values","title":"Feature Values","description":"Feature values are the actual values of the features that are calculated by Raptor. We store them in the State, and","sidebar":"reference"},"reference/how-does-raptor-work/features/README":{"id":"reference/how-does-raptor-work/features/README","title":"Features","description":"Features in Raptor are definitions for the \\"recipe\\" of how to calculate a feature value.","sidebar":"reference"},"reference/how-does-raptor-work/fqn":{"id":"reference/how-does-raptor-work/fqn","title":"fqn","description":"","sidebar":"reference"},"reference/how-does-raptor-work/historical-data-and-backfill":{"id":"reference/how-does-raptor-work/historical-data-and-backfill","title":"Historical Data and Retraining","description":"Training your model for the first time is quite intuitive using the LabSDK, but what about retraining your model?","sidebar":"reference"},"reference/how-does-raptor-work/readme":{"id":"reference/how-does-raptor-work/readme","title":"How does Raptor work?","description":"Raptor is extending Kubernetes to serve features in a production-grade manner. It\'s implementing the \\"Kubernetes Way,\\"","sidebar":"reference"},"reference/labsdk/decorators":{"id":"reference/labsdk/decorators","title":"decorators","description":"","sidebar":"reference"},"reference/labsdk/export":{"id":"reference/labsdk/export","title":"export","description":"","sidebar":"reference"},"reference/labsdk/featureset":{"id":"reference/labsdk/featureset","title":"featureset","description":"","sidebar":"reference"},"reference/pyexp/differences-with-python":{"id":"reference/pyexp/differences-with-python","title":"Differences with Python","description":"Although PyExp is pretty similar to \\"regular\\" python, it\'s actually has a few differences which allow us to run it in a deterministic way that is production-proof.","sidebar":"reference"},"reference/pyexp/handler-function":{"id":"reference/pyexp/handler-function","title":"Handler function","description":"Implementing features with PyExp is easy.","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/built-in-constants-and-functions":{"id":"reference/pyexp/pyexp-language-definition/built-in-constants-and-functions","title":"Built-in constants and functions","description":"The outermost block of the Starlark environment is known as the \\"predeclared\\" block. It defines a number of fundamental values and functions needed by all Starlark programs, such as None, True, False, and len, and possibly additional application-specific names.","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/built-in-methods":{"id":"reference/pyexp/pyexp-language-definition/built-in-methods","title":"Built-in methods","description":"This section lists the methods of built-in types. Methods are selected using dot expressions. For example, strings have a count method that counts occurrences of a substring; \\"banana\\".count(\\"a\\") yields 3.","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/data-types":{"id":"reference/pyexp/pyexp-language-definition/data-types","title":"Data types","description":"These are the main data types built in to the interpreter:","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/expressions":{"id":"reference/pyexp/pyexp-language-definition/expressions","title":"Expressions","description":"An expression specifies the computation of a value.","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/lexical-elements":{"id":"reference/pyexp/pyexp-language-definition/lexical-elements","title":"Lexical elements","description":"A Starlark program consists of one or more modules. Each module is defined by a single UTF-8-encoded text file.","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/name-binding-and-variables":{"id":"reference/pyexp/pyexp-language-definition/name-binding-and-variables","title":"Name binding and variables","description":"After a Starlark file is parsed, but before its execution begins, the Starlark interpreter checks statically that the program is well formed. For example, break and continue statements may appear only within a loop; a return statement may appear only within a function; and load statements may appear only outside any function.","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/README":{"id":"reference/pyexp/pyexp-language-definition/README","title":"PyExp: Language definition","description":"Raptor\'s Python Expression(PyExp) Language is based on the Starlark dialect of Python, which is intended for use as a configuration language.","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/statements":{"id":"reference/pyexp/pyexp-language-definition/statements","title":"Statements","description":"Pass statements","sidebar":"reference"},"reference/pyexp/pyexp-language-definition/value-concepts":{"id":"reference/pyexp/pyexp-language-definition/value-concepts","title":"Value concepts","description":"Starlark has eleven core data types. An application that embeds the Starlark intepreter may define additional types that behave like Starlark values. All values, whether core or application-defined, implement a few basic behaviors:","sidebar":"reference"},"reference/pyexp/raptor-built-ins/base64":{"id":"reference/pyexp/raptor-built-ins/base64","title":"base64","description":"base64 defines base64 encoding & decoding functions, often used to represent binary as text.","sidebar":"reference"},"reference/pyexp/raptor-built-ins/bsoup":{"id":"reference/pyexp/raptor-built-ins/bsoup","title":"bsoup","description":"bsoup defines a beautiful-soup-like API for working with HTML documents","sidebar":"reference"},"reference/pyexp/raptor-built-ins/geo":{"id":"reference/pyexp/raptor-built-ins/geo","title":"geo","description":"geo defines geographic operations in two-dimensional space","sidebar":"reference"},"reference/pyexp/raptor-built-ins/hash":{"id":"reference/pyexp/raptor-built-ins/hash","title":"hash","description":"hash defines hash primitives for starlark","sidebar":"reference"},"reference/pyexp/raptor-built-ins/html":{"id":"reference/pyexp/raptor-built-ins/html","title":"html","description":"html defines jquery-like html selection & iteration functions for HTML documents","sidebar":"reference"},"reference/pyexp/raptor-built-ins/json":{"id":"reference/pyexp/raptor-built-ins/json","title":"json","description":"Module json is a module of JSON-related functions.","sidebar":"reference"},"reference/pyexp/raptor-built-ins/math":{"id":"reference/pyexp/raptor-built-ins/math","title":"math","description":"Module math is a Starlark module of math-related functions and constants. The module defines the following functions:","sidebar":"reference"},"reference/pyexp/raptor-built-ins/re-regular-expressions":{"id":"reference/pyexp/raptor-built-ins/re-regular-expressions","title":"re (regular expressions)","description":"re defines regular expression functions, it\'s intended to be a drop-in subset of python\'s re module for starlark//docs.python.org/3/library/re.html","sidebar":"reference"},"reference/pyexp/raptor-built-ins/readme":{"id":"reference/pyexp/raptor-built-ins/readme","title":"Raptor Built-ins","description":"Raptor has implemented a few built-in functions in the PyExp Runtime that can help you integrate feature operations in your code:","sidebar":"reference"},"reference/pyexp/raptor-built-ins/struct":{"id":"reference/pyexp/raptor-built-ins/struct","title":"struct","description":"A generic object with fields.","sidebar":"reference"},"reference/pyexp/raptor-built-ins/time":{"id":"reference/pyexp/raptor-built-ins/time","title":"time","description":"Module time is a  module of time-related functions and constants. The module defines the following functions:","sidebar":"reference"},"reference/pyexp/readme":{"id":"reference/pyexp/readme","title":"Python Expression Language (PyExp)","description":"The Python Expression(PyExp) Language is one of the most popular ways for you to define the builder\'s business logic.","sidebar":"reference"},"reference/spec":{"id":"reference/spec","title":"Raptor Spec","description":"Feature Definitions are an abstraction that contains metadata about the feature that should lead to create a Feature Value.","sidebar":"reference"}}}')}}]);